requisitos: comandas, arquitectura mvc (todo ordenado), roles, sesiones, uso de tokens,
vistas: (mozo, cliente, cocina, caja, menu, administrador)

cliente:	el cliente podr√° ver el men√∫ o lo que ofrece la cevicher√≠a al escanear un c√≥digo QR desde su mesa, el cual lo redireccionar√° a la vista del men√∫ virtual.
		no ser√° necesario registrarse ni iniciar sesi√≥n, solo escanear y navegar. desde esta vista podr√° revisar los platos disponibles, sus descripciones, ingredientes, precios y algunas rese√±as de otros clientes.

menu virtual: 	Muestra los productos disponibles con una breve descripci√≥n, los ingredientes de cada plato, su precio actualizado y peque√±as rese√±as de clientes que ya los probaron.
		El men√∫ estar√° organizado por categor√≠as (entradas, ceviches, platos calientes, bebidas, postres) para facilitar la navegaci√≥n. Los productos podr√°n incluir etiquetas visuales como ‚Äúpicante‚Äù, ‚Äúrecomendado‚Äù, ‚Äúnuevo‚Äù o ‚Äúm√°s vendido‚Äù, ayudando al cliente en su elecci√≥n.
		Esta vista estar√° disponible mediante un QR √∫nico para todo el local o mediante un enlace (por ejemplo, para pedidos por delivery).
		Nota importante: Al escanear el QR, no se marcar√° autom√°ticamente la mesa como ocupada, ya que el QR es el mismo para todas. La gesti√≥n del estado de la mesa (disponible u ocupada) ser√° responsabilidad del mozo, quien podr√° hacerlo desde su interfaz al momento de tomar el pedido.

mozo: 		El mozo podr√° ver los sitios disponibles y no disponibles para acomodar al cliente, considerando que el local puede tener m√°s de un piso, as√≠ como distintas zonas como ni√±os, terraza, barra, 
		zona de espera (en caso de pedidos para llevar), sal√≥n privado o eventos, y delivery. Los distintos pisos y zonas deben estar visibles en la interfaz del mozo para que pueda marcar la mesa como ocupada.
		Para tomar el pedido, el mozo primero debe seleccionar la mesa junto con la zona que prefiera el cliente, facilitando as√≠ la correcta asignaci√≥n y distribuci√≥n del pedido en cocina.
		Luego, desde la misma vista, podr√° ubicar los platos organizados por categor√≠as, incluyendo bebidas, para una selecci√≥n r√°pida y sencilla.
		Desde la misma vista podr√° acceder al men√∫ organizado por categor√≠as y tomar el pedido, a√±adiendo modificadores como bebidas adicionales o cortes√≠as, y permitiendo detalles especiales por plato (ej. "ceviche sin cebolla").

		En caso de que un plato sea modificado o cancelado desde cocina, el mozo recibir√° una alerta visual discreta (sin notificaciones emergentes ni sonidos) que le permitir√° estar al tanto de la situaci√≥n y comunic√°rselo al cliente si es necesario.
		Adicionalmente, podr√° visualizar en todo momento el estado de cada plato mediante un sistema de colores que facilita el seguimiento y evita la sobrecarga de informaci√≥n:
	
		- üü¢ En cola: el pedido fue recibido por cocina, pero a√∫n no ha comenzado su preparaci√≥n.
		- üü° En preparaci√≥n: el plato est√° siendo elaborado por la cocina.
		- üî¥ Listo para entregar: el plato est√° terminado y listo para ser retirado.
		- ‚ö™ Entregado / servido: el plato ya fue entregado al cliente.
		- üü† Cancelado o modificado: el plato fue cancelado o tuvo cambios que requieren atenci√≥n.

		Estos colores estar√°n visibles junto a cada plato en la interfaz del mozo, ayudando a gestionar m√∫ltiples mesas de forma eficiente y sin distracciones.

		Finalmente, el mozo podr√° marcar los platos como entregados, cerrando el ciclo del pedido y actualizando el sistema de cocina.


cocina: 
   		Una vez que el mozo haya enviado el pedido del cliente, este aparecer√° en la vista de cocina en tiempo real, mostrando informaci√≥n clave como el n√∫mero de mesa, zona, piso, especificaciones especiales, nombre o ID del mozo, fecha y hora del pedido. 
   		Los pedidos se organizar√°n autom√°ticamente por hora de llegada para facilitar la gesti√≥n.

    		
    		Seg√∫n los platos pedidos, estos deben ser asignados a sus respectivas estaciones (por ejemplo: fr√≠os, calientes, bebidas, postres), ya sea manualmente o autom√°ticamente.

    		Se implementar√° un sistema de notificaciones discretas para alertar al personal de cocina en caso de que un pedido sea cancelado o modificado, evitando interrupciones molestas pero garantizando que no se pierda informaci√≥n importante.

    		La interfaz permitir√° el uso tanto en pantalla t√°ctil como mediante comandos r√°pidos por teclado, y contar√° con una funci√≥n de pantalla completa o modo TV para cocinas m√°s grandes.
    		Cada plato dentro del pedido deber√° pasar por diferentes etapas visibles en la interfaz, con estados representados por colores para facilitar el seguimiento r√°pido:

    		- üü¢ En cola: plato recibido pero a√∫n no iniciado.
    		- üü° En preparaci√≥n: plato en proceso activo de elaboraci√≥n.
    		- üî¥ Listo para entregar: plato terminado y disponible para entrega.
    		- ‚ö™ Entregado / servido: plato retirado por el mozo o entregado al cliente.
    		- üü† Cancelado o modificado: plato cancelado o modificado, con alerta inmediata al personal.

	    	Adem√°s, la cocina tendr√° acceso a un historial b√°sico de pedidos finalizados, cancelados o modificados para revisi√≥n y trazabilidad.

caja:		desde esta vista, el cajero podr√° ver las comandas listas para ser cobradas. cada comanda mostrar√° el detalle de la mesa, zona, piso, mozo que atendi√≥, hora del pedido, platos solicitados, cantidades y total a pagar.
		el cajero podr√° seleccionar la comanda correspondiente y procesar el pago, eligiendo entre los m√©todos disponibles como efectivo o tarjeta.
		una vez recibido el pago, la comanda ser√° marcada como cerrada y la mesa quedar√° libre para que el mozo pueda asignarla nuevamente a otro cliente.
		el pago deber√° quedar registrado en el sistema para control y posibles reportes futuros.
		(opcional) se podr√≠a incluir un historial de transacciones con filtros por fecha, mozo o tipo de pago, accesible √∫nicamente para el administrador y con acceso limitado para caja, en caso se requiera para auditor√≠as.

administrador:	desde esta vista, el administrador podr√° supervisar el funcionamiento general del sistema.
		tendr√° acceso a todas las vistas (mozo, cocina, caja, men√∫ virtual y cliente), con la posibilidad de consultar pedidos, pagos y estados de las mesas en tiempo real.
		podr√° realizar modificaciones simples como agregar, editar o eliminar productos del men√∫, as√≠ como cambiar precios o marcar productos como ‚Äúagotados‚Äù.
		tambi√©n podr√° configurar las zonas del local (como terraza, barra, sal√≥n privado, etc.), definir el n√∫mero de mesas por zona y piso, y actualizar la disponibilidad general del espacio.
		tendr√° acceso a un historial b√°sico de comandas finalizadas y ventas del d√≠a, √∫til para llevar un control general sin necesidad de reportes avanzados.
		podr√° gestionar los usuarios del sistema, como mozos y cajeros, asign√°ndoles roles y accesos seg√∫n su funci√≥n.

vista menu, vista para mozo (osea los sitios), vista para la cocina

https://www.youtube.com/shorts/sbKPrVR-yqI
https://www.youtube.com/shorts/64DPDCj09Jk
para caja
https://www.youtube.com/shorts/3LHnTQUi0bg

idea para cliente
https://www.youtube.com/shorts/8LGywKEKNqs

1. Cliente

Acciones:

	Escanea un QR ‚Üí redirige a vista del men√∫ virtual

	Puede ver: Platos, descripci√≥n, ingredientes, precio

	Rese√±as de otros clientes

Vista cliente (p√∫blica, no requiere login):


	/menu

	Dise√±o responsivo

	Bot√≥n para ver rese√±as, ingredientes

2. üçΩÔ∏è Mozo

Acciones:

	Ve mesas disponibles/no disponibles

	Visualiza plano del local (pisos y zonas: terraza, barra, ni√±os, etc.)

	Selecciona mesa y zona

	Toma pedido por categor√≠as (comidas, bebidas)
	
	A√±ade modificadores y observaciones (ej. ‚Äúsin cebolla‚Äù)

	Envia pedido (comanda) a cocina

Vista mozo (requiere login):

/mozo/mesas

/mozo/tomar-pedido

/mozo/ordenes

# üéØ CONTEXTO GENERAL DEL PROYECTO

Estoy desarrollando un sistema de gesti√≥n para una cevicher√≠a con:

- **Python + Flask** como backend
- **MySQL** como base de datos (administrada v√≠a phpMyAdmin)
- Tengo roles definidos como: cliente, mozo, cocina, caja, administrador
- Ya est√° implementado el sistema de login, pero **actualmente solo muestra un mensaje** (‚Äúingreso exitoso‚Äù) y **no redirige a la vista correspondiente seg√∫n el rol**
- Ya tengo parte del men√∫ y la base de datos con productos, usuarios y pedidos.

---

# üîÑ CAMBIOS Y ACTUALIZACIONES NECESARIAS

## ‚úÖ LOGIN Y REDIRECCI√ìN POR ROL

Quiero que, al iniciar sesi√≥n, el sistema detecte el rol del usuario y lo redirija autom√°ticamente a la vista correspondiente:

| Rol        | Ruta destino         | Vista que debe cargar            |
|------------|----------------------|----------------------------------|
| mozo       | `/mozo`              | Vista de control de mesas y pedidos |
| cocina     | `/cocina`            | Vista Kanban por estaci√≥n        |
| administrador | `/admin`         | Vista de supervisi√≥n general     |
| caja       | `/caja`              | *üî¥ A√∫n no implementada*         |

---

## üßæ FUNCIONALIDAD DEL MEN√ö VIRTUAL Y QR

Actualmente, el sistema genera **un QR diferente por mesa**, pero quiero cambiar eso por simplicidad:

- El **QR ser√° √∫nico para todo el local**.
- Al escanear el QR, el cliente ve el **men√∫ virtual** sin necesidad de iniciar sesi√≥n.
- El men√∫ est√° organizado por categor√≠as, y muestra platos con:
  - Nombre, descripci√≥n, ingredientes, precio
  - Etiquetas visuales: ‚Äúpicante‚Äù, ‚Äúrecomendado‚Äù, ‚Äúm√°s vendido‚Äù, etc.
  - Rese√±as de otros clientes

- El cliente **no debe poder pedir directamente** desde esta vista.
- El **mozo es quien debe iniciar el pedido**, y al hacerlo, debe poder:
  - Seleccionar la mesa manualmente
  - Marcarla como ocupada
  - Iniciar la comanda desde su panel

---

## üçΩÔ∏è VISTA DE COCINA ‚Äî ESTILO KANBAN

La cocina estar√° organizada por **estaciones**:
- fr√≠os
- calientes
- bebidas
- postres

Cada estaci√≥n tendr√° **su propio usuario √∫nico**, por ejemplo:
- `cocina1` ‚Üí fr√≠os
- `cocina2` ‚Üí calientes

Cada usuario solo puede iniciar sesi√≥n en **un dispositivo a la vez**.

### ‚úî Al iniciar sesi√≥n, el usuario de cocina:
- Ser√° redirigido a `/cocina`
- Ver√° un **tablero estilo Kanban** dividido por estados de plato:

üü¢ En cola ‚Üí plato recibido
üü° En preparaci√≥n ‚Üí plato en proceso
üî¥ Listo para entregar ‚Üí plato terminado
‚ö™ Entregado / servido ‚Üí entregado al cliente
üü† Cancelado o modificado ‚Üí cambio importante

### üí° Detalles t√©cnicos:
- Solo debe ver los platos asignados a su estaci√≥n (seg√∫n el campo `estacion` del usuario y del plato).
- Las tarjetas de plato deben poder moverse entre columnas con **drag & drop** (usa SortableJS o similar).
- Al cambiar el estado, debe enviarse una solicitud al backend (`/cambiar_estado`) para actualizar en la base de datos.
- Opci√≥n extra: resaltar platos si llevan mucho tiempo en un estado (ej: m√°s de 10 minutos).

---

## üßë‚Äçüç≥ VISTA DE MOZO

Ruta: `/mozo`

El mozo debe poder:
- Ver todas las mesas por piso y zona (ej: terraza, barra, etc.)
- Ver cu√°les est√°n disponibles, ocupadas, en espera, etc.
- Seleccionar una mesa para iniciar un nuevo pedido
- Ver los productos por categor√≠a (igual que el cliente)
- Agregar platos al pedido con modificadores (ej: sin cebolla)
- Enviar el pedido a cocina

Adicional:
- Si cocina cancela o modifica un plato, debe recibir un **alerta visual discreta** (no notificaciones emergentes).
- El mozo ve el estado de cada plato con un c√≥digo de color (üü¢üü°üî¥‚ö™üü†).

---

## üõ†Ô∏è VISTA DE ADMINISTRADOR

Ruta: `/admin`

El administrador debe tener acceso a:
- Supervisar en tiempo real:
  - Estado de las mesas
  - Pedidos en curso
  - Vista general de cocina y mozos
- Modificar el men√∫:
  - Agregar, editar, eliminar productos
  - Cambiar precios
  - Marcar productos como agotados
- Configurar el local:
  - Definir zonas (terraza, barra, etc.)
  - Asignar n√∫mero de mesas por zona y piso
- Ver un historial de ventas b√°sico
- Gestionar usuarios del sistema

---

# üö´ VISTA DE CAJA

‚ö†Ô∏è Por el momento, **no implementar la vista de caja**.  
Se implementar√° m√°s adelante una vez que el resto del flujo est√© funcional.


## üöÄ **FUNCIONALIDADES ACTIVAS:**

‚úÖ **Sesiones M√∫ltiples Independientes**
‚úÖ **Contrase√±as √önicas por Usuario**
‚úÖ **Men√∫ del Restaurante Funcionando**
‚úÖ **Auto-logout 5 minutos**
‚úÖ **Zona Horaria Lima (UTC-5)**
‚úÖ **Interface Bootstrap Moderna**
‚úÖ **Panel Administrativo Completo**
‚úÖ **Base de Datos Optimizada**

---
    El sistema tambien debe tener y agegarse mas

## üè™ **ESTACIONES DE COCINA:**
- **Fr√≠os:** Ceviches, tiraditos, causas
- **Calientes:** Arroces, sudados, sopas
- **Frituras:** Chicharrones, jaleas
- **Bebidas:** Jugos, tragos, gaseosas
- **Postres:** Dulces y postres
- **Acompa√±amientos:** Guarniciones y extras